" This configuration are shared between nvim and vim
"
if has('vim_starting')
  set nocompatible               
endif

execute pathogen#infect()
syntax on
filetype plugin indent on
set t_Co=256
if has("termguicolors")
set termguicolors
endif
set nu

set bg=dark
" CURSOR:
set guicursor=a:hor30-Cursor/lCursor
set ts=2
set softtabstop=0
" number of space chars
set shiftwidth=2
" convert tab to spaces
set expandtab

" enable term gui colors
"set termguicolors
" first split right
set splitright
" then split below
set splitbelow

" encodings
set encoding=UTF-8
set fileencoding=UTF-8
set fileencodings=UTF-8

"  fonts
set guifont='Meslo\ LG\ M\ DZ\ Regular\ Nerd\ Font\ Complete\ 12'
set backspace=indent,eol,start

" colorcolumn at 80.
set cc=80

" show hidden buffers
set hidden


" searching
set hlsearch
set incsearch
set ignorecase
set smartcase

" swap files
set nobackup
set noswapfile

" our shell is zsh
set fileformats=unix,dos,mac
set showcmd
set shell=/bin/zsh

" VimPlug

" Check if vim plug exists
let vimplug_exists=expand('~/.config/nvim/autoload/plug.vim')
if !filereadable(vimplug_exists)
	echo "Installing vim plug..."
	echo ""
  silent !\curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  let g:not_finish_vimplug = "yes"
  autocmd VimEnter * PlugInstall
endif


if has("nvim")
	call plug#begin()
	Plug 'Mofiqul/dracula.nvim'
	Plug 'neoclide/coc.nvim', {'branch': 'release'}
  " typescript support
  Plug 'leafgarland/typescript-vim'
  Plug 'peitalin/vim-jsx-typescript'
  " treesitter extended highlighting
  Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
"  Plug 'lewis6991/gitsigns.nvim'
"  Bufferline
  Plug 'akinsho/bufferline.nvim', { 'tag': 'v3.*' }
  Plug 'neovim/nvim-lspconfig'
" Telescope ( also install ripgrep,fd)
  Plug 'nvim-lua/plenary.nvim'
  Plug 'nvim-telescope/telescope.nvim', { 'tag': '0.1.1' }
  Plug 'nvim-telescope/telescope-fzf-native.nvim', { 'do': 'cmake -S. -Bbuild -DCMAKE_BUILD_TYPE=Release && cmake --build build --config Release && cmake --install build --prefix build' }
	call plug#end()
endif

" The length of time Vim waits after you stop typing before it triggers the plugin
" Default is 4000ms
set updatetime=400

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved
set signcolumn=yes

" COC configuration
" use <tab> to trigger completion and navigate to the next complete item
function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

inoremap <silent><expr> <Tab>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr> <Tab> coc#pum#visible() ? coc#pum#next(1) : "\<Tab>"
inoremap <expr> <S-Tab> coc#pum#visible() ? coc#pum#prev(1) : "\<S-Tab>"

" Use <c-space> to trigger completion
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

let g:airline_powerline_fonts = 1

if !exists('g:airline_symbols')
	    let g:airline_symbols = {}
endif

" unicode symbols
let g:airline_left_sep = '»'
let g:airline_left_sep = '▶'
let g:airline_right_sep = '«'
let g:airline_right_sep = '◀'
"let g:airline_symbols.linenr = '␊'
"let g:airline_symbols.linenr = '␤'
"let g:airline_symbols.linenr = '¶'
"let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.paste = 'Þ'
let g:airline_symbols.paste = '∥'
let g:airline_symbols.whitespace = 'Ξ'

" airline symbols
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''

" vim-fugitive git branch
let g:airline#extensions#branch#enabled=1

" directly copy to clipboard if feature exists
if has("clipboard")
	noremap y "+y
endif

" KEYBINDINGS
" ===========

" nnoremap <C-w>h Go left tab
" nnoremap <C-w>l Go right tab
" nnoremap <C-w>j Go up tab
" nnoremap <C-w>k Go down tab
" nnoremap <C-w>s split vertial
" nnoremap <C-w>v split horizontal 
" nnoremap <C-w>H move the current window far left
" nnoremap <C-w>L move the current window far	right 
" nnoremap <C-w>J move the current window very top 
" nnoremap <C-w>K move the current window very bottom 

" Ignores

" NERDTree:
let NERDTreeShowHidden=1
let g:NERDTreeIgnore=['node_modules', '__pycache__']
let g:NERDTreeMinimalUI = 1
nnoremap <C-b> :NERDTreeToggle<CR>

" INTEGRATED TERMINAL: (NEOVIM)
if has("nvim")
  tnoremap <Esc> <C-\><C-n>
  au BufEnter * if &buftype == 'terminal' | :startinsert | endif
  function! OpenTerminal()
    split term://zsh
    resize 15
  endfunction
  nnoremap <c-n> :call OpenTerminal()<CR>
endif


" ALE LINTER:
let g:ale_linters = {'clojure':['clj-kondo']}
let g:ale_fixers = {}
let g:ale_fixers.python = ['black']
let g:ale_linters = {'clojure':['clj-kondo'], 'python': ['pylint']}
let g:ale_python_executable='python3'

" FZF:
"nnoremap <C-p> :FZF<CR>
" let g:fzf_action = {
"   \ 'ctrl-t': 'tab split', 
"   \ 'ctrl-s': 'split', 
"   \ 'ctrl-v': 'vsplit'
"   \}

" FUZZY FIND
" CTRLP:
"set wildignore+=*.o,*.obj,.git,*.rbc,*.pyc,__pycache__,node_modules
"let g:ctrlp_show_hidden=1
" let g:ctrlp_custom_ignore='\v[\/](node_modules|target|dist)|(\.(swp|tox|ico|git|hg|svn))$'

" Telescope ==================================================================
nnoremap <C-p> <cmd>Telescope find_files<cr>
noremap <C-f> <cmd>Telescope live_grep<cr>
"nnoremap <C-f> <cmd>Telescope buffers<cr>
"nnoremap <C-f> <cmd>Telescope help_tags<cr>
lua << EOF
require('telescope').setup{
  defaults = {
    mappings = {
      i = { -- Insert mode mappings
        ["<C-k>"] = require('telescope.actions').move_selection_previous,
        ["<C-j>"] = require('telescope.actions').move_selection_next,
      }
    },
    file_ignore_patterns = {
      ".git","node_modules","__pycache__", ".svn",".hg",".tox",".ico",".png"
    }
  },
  pickers = {
    find_files = {
      hidden = true
    }
  }
}
EOF
" Telescope setup end ========================================================

" COC:
if has("nvim")
  let g:coc_global_extensions = ['coc-emmet', 'coc-css', 'coc-html', 'coc-json', 'coc-prettier', 'coc-tsserver']
endif

" Treesitter configuration with lua-here:
lua << EOF
require'nvim-treesitter.configs'.setup {
  ensure_installed = { "c", "lua", "vim", "help", "query" },

  sync_install = false,

  auto_install = true,

  highlight = {
    enable = true,

    disable = function(lang, buf)
        local max_filesize = 100 * 1024 -- 100 KB
        local ok, stats = pcall(vim.loop.fs_stat, vim.api.nvim_buf_get_name(buf))
        if ok and stats and stats.size > max_filesize then
            return true
        end
    end,

    additional_vim_regex_highlighting = false,
  },
}
EOF



" [Python] Black python formatting
let g:black_linelength = 79

" [Python] Format on save
augroup black_on_save
	autocmd!
	autocmd BufWritePre *.py Black
augroup end
"nnoremap <F9> :Black<CR>
 
" [Python, Typescript] LSP Configuration:
"lua require'lspconfig'.pyright.setup{}
lua << EOF
local lspconfig = require('lspconfig')
local util = require "lspconfig/util"
lspconfig.pyright.setup{}
lspconfig.tsserver.setup{}

lspconfig.gopls.setup {
  cmd = {"gopls", "serve"},
  filetypes = {"go", "gomod"},
  root_dir = util.root_pattern("go.work", "go.mod", ".git"),
  settings = {
    gopls = {
      analyses = {
        unusedparams = true,
      },
      staticcheck = true,
    },
  },
}
EOF


"autocmd vimenter * ++nested colorscheme gruvbox
"GRUVBox theme
let g:gruvbox_italic=1
"let g:gruvbox_contrast_dark="hard"
autocmd vimenter * colorscheme gruvbox 
"autocmd vimenter * lua require"bufferline".setup { options = { separator_style = "slant" } }
"
" Bufferline:
let g:airline#extensions#tabline#enabled = 0
autocmd vimenter * lua require"bufferline".setup { options = { separator_style = "slant" } }

